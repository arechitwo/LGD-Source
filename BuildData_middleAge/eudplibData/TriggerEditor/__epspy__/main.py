## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _TYGV, _TYSV, _TYLV, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LSH, _ALL
# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Systems.map_manager as mmgr;
from Systems import map_manager as mmgr
# (Line 3) import Units.unit_operation as unitop;
from Units import unit_operation as unitop
# (Line 5) var addr, ptrAddr, patternAddr, num;
addr, ptrAddr, patternAddr, num = EUDCreateVariables(4)
# (Line 6) var pChat;//, chat
pChat = EUDVariable()
# (Line 8) const nums_ = PVariable();
nums_ = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) const patternAction_ = PVariable();
patternAction_ = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 10) const chatAction_ = PVariable();
chatAction_ = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 11) const pattern_len = 13;
pattern_len = _CGFW(lambda: [13], 1)[0]
# (Line 14) EUDRegisterObjectToNamespace("addr", addr);
EUDRegisterObjectToNamespace("addr", addr)
# (Line 15) EUDRegisterObjectToNamespace("ptrAddr", ptrAddr);
EUDRegisterObjectToNamespace("ptrAddr", ptrAddr)
# (Line 16) EUDRegisterObjectToNamespace("patternAddr", patternAddr);
EUDRegisterObjectToNamespace("patternAddr", patternAddr)
# (Line 17) EUDRegisterObjectToNamespace("num", num);
EUDRegisterObjectToNamespace("num", num)
# (Line 18) EUDRegisterObjectToNamespace("pChat", pChat);
EUDRegisterObjectToNamespace("pChat", pChat)
# (Line 19) EUDRegisterObjectToNamespace("nums_", nums_);
EUDRegisterObjectToNamespace("nums_", nums_)
# (Line 20) EUDRegisterObjectToNamespace("patternAction_", patternAction_);
EUDRegisterObjectToNamespace("patternAction_", patternAction_)
# (Line 21) EUDRegisterObjectToNamespace("chatAction_", chatAction_);
EUDRegisterObjectToNamespace("chatAction_", chatAction_)
# (Line 23) function onPluginStart(){
@EUDFunc
def onPluginStart():
    # (Line 26) randomize();
    f_randomize()
    # (Line 28) foreach(cp : EUDLoopPlayer("Human")) {//set computer player to Enemy
    for cp in EUDLoopPlayer("Human"):
        # (Line 29) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 30) SetAllianceStatus((7), (0));
        # (Line 31) RunAIScript("Turn ON Shared Vision for Player 8");
        DoActions(SetAllianceStatus((7), (0)))
        # (Line 32) }
        DoActions(RunAIScript("Turn ON Shared Vision for Player 8"))
        # (Line 33) mmgr.init();

    mmgr.f_init()
    # (Line 36) }
    # (Line 39) function beforeTriggerExec(){

@EUDFunc
def beforeTriggerExec():
    # (Line 43) mmgr.mainLoop();
    mmgr.f_mainLoop()
    # (Line 44) unitop.mainLoop();
    unitop.f_mainLoop()
    # (Line 45) if( patternAddr > 0 ){
    if EUDIf()(patternAddr <= 0, neg=True):
        # (Line 46) num = parse(ptrAddr + pattern_len)[[0]];
        num << (f_parse(ptrAddr + pattern_len)[0])
        # (Line 47) pChat = patternAddr;
        pChat << (patternAddr)
        # (Line 48) }
        # (Line 50) CreateUnit(1, 42, "생성_삭제_반복", 7);
    EUDEndIf()
    # (Line 51) RemoveUnit(42, 7);
    DoActions(CreateUnit(1, 42, "생성_삭제_반복", 7))
    # (Line 52) }
    DoActions(RemoveUnit(42, 7))
    # (Line 54) function afterTriggerExec() {

@EUDFunc
def afterTriggerExec():
    # (Line 57) }
    pass
