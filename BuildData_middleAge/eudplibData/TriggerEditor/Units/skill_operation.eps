const tempUnitGroup = UnitGroup(1700);

function useCapitalSkill(player : TrgPlayer, unit : CUnit){
    const orderId          = unit.orderID; 

    if (orderId != 31 || orderId != 30) return;// 건설 명령이 아닐 경우 리턴
    
    
    const orderState       = unit.orderState;
    const posX             = unit.posX;
    const posY             = unit.posY;
    const targetX          = unit.orderTargetX;
    const targetY          = unit.orderTargetY;
    const buildQ           = unit.buildQueue1;
    const buildMaxRange    = 15 * 32;
    const buildMinRange    = 10 * 32;

    
    const dx = posX - targetX;
    const dy = posY - targetY;
    dx.iabs();
    dy.iabs();
    if (dx * dx + dy * dy > buildMaxRange * buildMaxRange) {
        eprintf("건설 위치가 너무 멉니다.");
        PlayWAV("sound\\Protoss\\PROBE\\PPrErr00.WAV");
        //TODO: 건설 위치가 너무 멀 경우 처리 에러 사운드 출력하는 법 찾기.
    }
    else if(dx * dx + dy * dy < buildMinRange * buildMinRange) {
        eprintf("건설 위치가 너무 가깝습니다.");
        PlayWAV("sound\\Protoss\\PROBE\\PPrErr00.WAV");
    }
    else {
        setloc("buildTarget", targetX, targetY);
        //투명 프로브를 생성하여 대신 건설
        const temp = CUnit.from_read(EPD(0x628438));
        
        if(orderId == 31){
            CreateUnit(1, "Protoss Probe", "buildTarget", player);
            bwrite_epd(temp + 0x4C/4, 1, 31);
        } else {
            CreateUnit(1, "Terran SCV", "buildTarget", player);
            bwrite_epd(temp + 0x4C/4, 1, 30);
        }
        
        //명령
        
        //좌표
        wwrite_epd(temp + 0x58/4, 0, targetX);
        wwrite_epd(temp + 0x58/4, 2, targetY);
        //유닛
        wwrite_epd(temp + 0x98/4, 0, buildQ);
        //유닛 삭제
        tempUnitGroup.add(temp);
    }
    
    //생산유닛의 값 초기화. 하지 않으면 명령ID가 변경되지 않아 버그가 일어날 것.
    bwrite_epd(unit + 0x4C/4, 1, 3);
    bwrite_epd(unit + 0x4C/4, 2, 0);
    wwrite_epd(unit + 0x98/4, 0, 228);

}